import os
import pandas as pd
from dotenv import load_dotenv
from sentence_transformers import SentenceTransformer
from pinecone import Pinecone, ServerlessSpec
from transformers import pipeline
from flask import Flask, request, jsonify

# --- KH·ªûI T·∫†O ·ª®NG D·ª§NG FLASK ---
app = Flask(__name__)

# --- C·∫§U H√åNH V√Ä T·∫¢I M√î H√åNH (CH·ªà M·ªòT L·∫¶N KHI START) ---

# 1. T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env ·ªü th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
# ƒê∆∞·ªùng d·∫´n t·ª´ 'web/app.py' ƒë·∫øn th∆∞ m·ª•c cha 'Moviesproject' l√† '..'
dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env')
load_dotenv(dotenv_path=dotenv_path)

PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")

if not PINECONE_API_KEY:
    raise ValueError("Vui l√≤ng ƒë·∫∑t PINECONE_API_KEY trong file .env")

# 2. T·∫£i c√°c m√¥ h√¨nh v√† k·∫øt n·ªëi d·ªãch v·ª•
print("=> ƒêang t·∫£i m√¥ h√¨nh v√† k·∫øt n·ªëi d·ªãch v·ª•. Vui l√≤ng ƒë·ª£i...")
try:
    # M√¥ h√¨nh ƒë·ªÉ t·∫°o vector embedding
    print("   - T·∫£i SentenceTransformer model...")
    model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-mpnet-base-v2")

    # M√¥ h√¨nh d·ªãch thu·∫≠t
    print("   - T·∫£i Translation model...")
    TRANSLATION_MODEL = "Helsinki-NLP/opus-mt-vi-en"
    translator = pipeline("translation", model=TRANSLATION_MODEL)

    # K·∫øt n·ªëi t·ªõi Pinecone
    print("   - K·∫øt n·ªëi t·ªõi Pinecone...")
    pc = Pinecone(api_key=PINECONE_API_KEY)
    index_name = "movies"
    
    # Ki·ªÉm tra xem index c√≥ t·ªìn t·∫°i kh√¥ng
    if index_name not in pc.list_indexes().names():
         raise NameError(f"Index '{index_name}' kh√¥ng t·ªìn t·∫°i trong Pinecone. Vui l√≤ng t·∫°o index tr∆∞·ªõc.")
         
    index = pc.Index(index_name)
    print("=> Kh·ªüi t·∫°o ho√†n t·∫•t. M√°y ch·ªß ƒë√£ s·∫µn s√†ng! ‚úÖ")
except Exception as e:
    print(f"L·ªñI: Kh√¥ng th·ªÉ kh·ªüi t·∫°o m√¥ h√¨nh ho·∫∑c k·∫øt n·ªëi d·ªãch v·ª•. {e}")
    # Tho√°t n·∫øu kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh
    exit()


# --- LOGIC T√åM KI·∫æM PHIM (ƒê√£ ch·ªânh s·ª≠a ƒë·ªÉ tr·∫£ v·ªÅ JSON) ---
def find_similar_movies(vietnamese_query, top_k=5):
    """
    H√†m t√¨m ki·∫øm ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªïi ƒë·ªÉ tr·∫£ v·ªÅ m·ªôt danh s√°ch c√°c dictionary.
    """
    print(f"\nüé¨ Nh·∫≠n y√™u c·∫ßu t√¨m ki·∫øm cho: '{vietnamese_query}'")

    # B∆Ø·ªöC 1: D·ªäCH SANG TI·∫æNG ANH
    translated_result = translator(vietnamese_query)
    english_query = translated_result[0]['translation_text']
    print(f"   -> ƒê√£ d·ªãch sang (EN): '{english_query}'")

    # B∆Ø·ªöC 2: T·∫†O VECTOR T·ª™ C√ÇU TI·∫æNG ANH
    query_embedding = model.encode(english_query).tolist()

    # B∆Ø·ªöC 3: TRUY V·∫§N PINECONE
    results = index.query(
        vector=query_embedding,
        top_k=top_k,
        include_metadata=True
    )

    # B∆Ø·ªöC 4: CHU·∫®N B·ªä K·∫æT QU·∫¢ ƒê·ªÇ TR·∫¢ V·ªÄ
    movie_results = []
    if not results['matches']:
        print("   -> Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.")
        return []

    for match in results['matches']:
        movie_results.append({
            'title': match['metadata'].get('title', 'N/A'),
            'overview': match['metadata'].get('overview', 'No overview available.'),
            'score': match['score']
        })
    print(f"   -> T√¨m th·∫•y {len(movie_results)} k·∫øt qu·∫£.")
    return movie_results


# --- ƒê·ªäNH NGHƒ®A API ENDPOINT ---
@app.route('/search', methods=['GET'])
def search():
    """
    Endpoint nh·∫≠n query t·ª´ ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON.
    C√°ch d√πng: GET /search?query=phim v·ªÅ r·ªìng
    """
    # L·∫•y query t·ª´ URL parameter
    user_query = request.args.get('query')

    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ query
    if not user_query:
        return jsonify({"error": "Vui l√≤ng cung c·∫•p 'query' parameter."}), 400

    try:
        # G·ªçi h√†m t√¨m ki·∫øm
        similar_movies = find_similar_movies(user_query)
        # Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON
        return jsonify({"results": similar_movies})
    except Exception as e:
        print(f"L·ªñI API: {e}")
        return jsonify({"error": "ƒê√£ c√≥ l·ªói x·∫£y ra tr√™n m√°y ch·ªß."}), 500

@app.route('/', methods=['GET'])
def home():
    return "<h1>Movie Search API</h1><p>S·ª≠ d·ª•ng endpoint <code>/search?query=</code> ƒë·ªÉ t√¨m ki·∫øm.</p>"

# --- CH·∫†Y ·ª®NG D·ª§NG ---
if __name__ == '__main__':
    # Ch·∫°y server tr√™n c·ªïng 5000, c√≥ th·ªÉ truy c·∫≠p t·ª´ m·ªçi IP
    app.run(host='0.0.0.0', port=5000, debug=True)

